#!/usr/bin/env node

import { spawn } from 'child_process';
import { existsSync, writeFileSync } from 'fs';
import { join, dirname } from 'path';
import { fileURLToPath } from 'url';
import { createInterface } from 'readline';

const __filename = fileURLToPath(import.meta.url);
const __dirname = dirname(__filename);
const rootDir = join(__dirname, '..');

const colors = {
  reset: '\x1b[0m',
  bright: '\x1b[1m',
  green: '\x1b[32m',
  yellow: '\x1b[33m',
  blue: '\x1b[34m',
  cyan: '\x1b[36m'
};

const log = (msg, color = 'reset') => console.log(`${colors[color]}${msg}${colors.reset}`);

async function setupDatabase() {
  log('\n='.repeat(60), 'blue');
  log('  Database Setup', 'bright');
  log('='.repeat(60) + '\n', 'blue');

  const envPath = join(rootDir, '.env');

  if (!existsSync(envPath)) {
    log('⚠ No .env file found. Creating from .env.example...', 'yellow');

    const envExamplePath = join(rootDir, '.env.example');
    if (existsSync(envExamplePath)) {
      const envContent = `# Jules Platform Environment Variables
# Auto-generated by setup script

# PostgreSQL Configuration
POSTGRES_DB=jules_db
POSTGRES_USER=jules_user
POSTGRES_PASSWORD=jules_local_dev_password

# Backend Security
JWT_SECRET=jules_local_dev_jwt_secret_min_32_chars_required_12345
ENCRYPTION_KEY=jules_local_dev_encryption_key_32_bytes_min

# CORS Configuration
CORS_ORIGIN=http://localhost:3000

# Frontend Environment Variables
VITE_API_URL=http://localhost:8000
VITE_WS_URL=ws://localhost:8000

# Database URL (auto-generated)
DATABASE_URL=postgresql://jules_user:jules_local_dev_password@localhost:5432/jules_db?schema=public
`;

      writeFileSync(envPath, envContent);
      log('✓ Created .env file', 'green');
    }
  }

  // Check if using Docker or local DB
  log('\nChecking database connection...', 'cyan');

  try {
    // Try to run Prisma generate first
    await runCommand('npx', ['prisma', 'generate'], join(rootDir, 'jules-backend'));
    log('✓ Prisma client generated', 'green');

    // Try to run migrations
    await runCommand('npx', ['prisma', 'migrate', 'deploy'], join(rootDir, 'jules-backend'));
    log('✓ Database migrations completed', 'green');
  } catch (error) {
    log('\n⚠ Database not accessible. You can:', 'yellow');
    log('  1. Start PostgreSQL with: docker-compose up -d postgres', 'yellow');
    log('  2. Or install PostgreSQL locally', 'yellow');
    log('  3. Then run: npm run prisma:migrate\n', 'yellow');
  }
}

function runCommand(command, args, cwd) {
  return new Promise((resolve, reject) => {
    const child = spawn(command, args, {
      cwd,
      stdio: 'inherit',
      shell: true
    });

    child.on('close', (code) => {
      if (code !== 0) {
        reject(new Error(`Command failed with code ${code}`));
      } else {
        resolve();
      }
    });

    child.on('error', reject);
  });
}

setupDatabase().catch(console.error);
